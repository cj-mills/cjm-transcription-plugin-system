"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/plugin_interface.ipynb.

# %% auto 0
__all__ = ['PluginInterface', 'PluginMeta', 'ExamplePlugin']

# %% ../nbs/plugin_interface.ipynb 3
from abc import ABC, abstractmethod
import logging
from typing import Optional, Dict, Any, Union, List
from pathlib import Path

from cjm_transcription_plugin_system.plugin_interface import PluginInterface

class ExamplePlugin(PluginInterface):
    """An example plugin implementation."""

    def __init__(self):
        self.logger = logging.getLogger(f"{__name__}.{type(self).__name__}")
    
    @property
    def name(self) -> str:
        return "example_plugin"
    
    @property
    def version(self) -> str:
        return "1.0.0"

    @property
    def supported_formats(self) -> List[str]:
        return ["wav", "mp3", "flac"]
    
    def initialize(self, config: Optional[Dict[str, Any]] = None) -> None:
        """Initialize the plugin."""
        self.config = config or {}
        self.logger.info(f"Initializing {self.name} with config: {self.config}")
    
    def execute(self, *args, **kwargs) -> Any:
        """Execute the plugin's functionality."""
        self.logger.info(f"Example plugin executed with args: {args}, kwargs: {kwargs}")
        return "This is an example transcription."

    def is_available(self) -> bool:
        """Check availability."""
        return True
    
    def cleanup(self) -> None:
        """Clean up resources."""
        self.logger.info(f"Cleaning up {self.name}")
