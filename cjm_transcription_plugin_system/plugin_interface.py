"""Abstract base class defining the interface for transcription plugins"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/plugin_interface.ipynb.

# %% auto 0
__all__ = ['PluginInterface', 'PluginMeta']

# %% ../nbs/plugin_interface.ipynb 3
from abc import ABC, abstractmethod
import logging
from typing import Optional, Dict, Any, Union, List
from pathlib import Path
from dataclasses import dataclass, field
from .core import AudioData, TranscriptionResult

# %% ../nbs/plugin_interface.ipynb 4
class PluginInterface(ABC):
    """Base interface that all transcription plugins must implement."""
    
    @property
    @abstractmethod
    def name(
        self
    ) -> str:  # The unique identifier for this plugin
        """Unique plugin identifier."""
        pass
    
    @property
    @abstractmethod
    def version(
        self
    ) -> str:  # The semantic version string (e.g., "1.0.0")
        """Plugin version."""
        pass
    
    @property
    @abstractmethod
    def supported_formats(
        self
    ) -> List[str]:  # List of file extensions this plugin can process
        """List of supported audio formats (e.g., ['wav', 'mp3'])."""
        pass
    
    @abstractmethod
    def initialize(
        self,
        config: Optional[Dict[str, Any]] = None  # Configuration dictionary for plugin-specific settings
    ) -> None:
        """Initialize the plugin with configuration."""
        pass
    
    @abstractmethod
    def execute(
        self,
        *args,
        **kwargs
    ) -> Any:  # Returns transcription result or plugin-specific output
        """Transcribe audio to text."""
        pass
    
    @abstractmethod
    def is_available(
        self
    ) -> bool:  # True if all required dependencies are available
        """Check if the plugin's dependencies are available."""
        pass
    
    def cleanup(
        self
    ) -> None:
        """Optional cleanup when plugin is unloaded."""
        pass

# %% ../nbs/plugin_interface.ipynb 6
@dataclass
class PluginMeta:
    """Metadata about a plugin."""
    name: str  # The plugin's unique identifier
    version: str  # The plugin's version string
    description: str = ""  # A brief description of the plugin's functionality
    author: str = ""  # The plugin author's name or organization
    package_name: str = ""  # The Python package name containing the plugin
    instance: Optional[PluginInterface] = None  # The plugin instance
    enabled: bool = True  # Whether the plugin is enabled
